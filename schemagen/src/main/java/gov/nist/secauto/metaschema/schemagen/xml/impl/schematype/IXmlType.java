/*
 * SPDX-FileCopyrightText: none
 * SPDX-License-Identifier: CC0-1.0
 */

package gov.nist.secauto.metaschema.schemagen.xml.impl.schematype;

import gov.nist.secauto.metaschema.core.util.ObjectUtils;
import gov.nist.secauto.metaschema.schemagen.SchemaGenerationException;
import gov.nist.secauto.metaschema.schemagen.xml.impl.XmlGenerationState;

import javax.xml.XMLConstants;
import javax.xml.namespace.QName;

import edu.umd.cs.findbugs.annotations.NonNull;

public interface IXmlType {

  /**
   * Determine if the declaration should be generated inline.
   *
   * @param state
   *          the schema generation state used for context
   * @return {@code true} if the type should generated inline or {@code false}
   *         otherwise
   */
  boolean isInline(@NonNull XmlGenerationState state);

  /**
   * Determine if the type is generated by the schema generator.
   * <p>
   * Built-in types are not generated by the schema generator.
   *
   * @param state
   *          the schema generation state used for context
   * @return {@code true} if the type is generated by the schema generator or
   *         {@code false} otherwise
   */
  boolean isGeneratedType(@NonNull XmlGenerationState state);

  /**
   * Generate the schema type.
   *
   * @param state
   *          the schema generation state used for context and writing
   * @throws SchemaGenerationException
   *           if an error occurred while writing the type
   */
  void generate(@NonNull XmlGenerationState state);

  /**
   * Get the type's name.
   * <p>
   * This is a shortcut to calling
   * {@link #getQName()}.{@link QName#getLocalPart()}.
   *
   * @return the type name
   */
  @NonNull
  default String getTypeName() {
    return ObjectUtils.notNull(getQName().getLocalPart());
  }

  /**
   * Get the type's XML qualified name.
   *
   * @return the qualified name
   */
  @NonNull
  QName getQName();

  /**
   * Get the type name for use as a type reference. This type is namespace
   * prefixed when needed.
   *
   * @return the type name
   */
  @NonNull
  default String getTypeReference() {
    QName qname = getQName();
    String prefix = qname.getPrefix();
    String retval;
    if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {
      retval = ObjectUtils.notNull(qname.getLocalPart());
    } else {
      retval = ObjectUtils.notNull(new StringBuilder()
          .append(prefix)
          .append(':')
          .append(qname.getLocalPart())
          .toString());
    }
    return retval;
  }

  /**
   * Determine if the type is used in the schema.
   *
   * @param state
   *          the schema generation state used for context
   * @return {@code true} if the type is used or {@code false} otherwise
   */
  boolean isReferenced(@NonNull XmlGenerationState state);
}
